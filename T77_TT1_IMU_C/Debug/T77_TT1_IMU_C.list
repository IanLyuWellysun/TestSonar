
T77_TT1_IMU_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080044cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080044cc  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202e  00000000  00000000  00033732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00036830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d90d  00000000  00000000  00037818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010760  00000000  00000000  00055125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4f94  00000000  00000000  00065885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a819  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a00  00000000  00000000  0012a86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004480 	.word	0x08004480

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004480 	.word	0x08004480

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fe5f 	bl	80017ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f834 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f938 	bl	8000d84 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000b14:	f000 f87c 	bl	8000c10 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000b18:	f000 f8c0 	bl	8000c9c <MX_SPI1_Init>
  MX_TIM6_Init();
 8000b1c:	f000 f8fc 	bl	8000d18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000b20:	2064      	movs	r0, #100	; 0x64
 8000b22:	f000 fec3 	bl	80018ac <HAL_Delay>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000b26:	4812      	ldr	r0, [pc, #72]	; (8000b70 <main+0x6c>)
 8000b28:	f001 f94c 	bl	8001dc4 <HAL_FDCAN_Start>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <main+0x32>
  {
	  Error_Handler();
 8000b32:	f000 fcef 	bl	8001514 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000b36:	2200      	movs	r2, #0
 8000b38:	2101      	movs	r1, #1
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <main+0x6c>)
 8000b3c:	f001 f9ae 	bl	8001e9c <HAL_FDCAN_ActivateNotification>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <main+0x46>
  {
	  Error_Handler();
 8000b46:	f000 fce5 	bl	8001514 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY, 0) != HAL_OK)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <main+0x6c>)
 8000b52:	f001 f9a3 	bl	8001e9c <HAL_FDCAN_ActivateNotification>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <main+0x5c>
  {
	  Error_Handler();
 8000b5c:	f000 fcda 	bl	8001514 <Error_Handler>
  }
  CanInitial();
 8000b60:	f000 fa38 	bl	8000fd4 <CanInitial>
  ConfigICM42607T();
 8000b64:	f000 f99e 	bl	8000ea4 <ConfigICM42607T>
  HAL_TIM_Base_Start_IT(&htim6);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <main+0x70>)
 8000b6a:	f003 f8f3 	bl	8003d54 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x6a>
 8000b70:	20000028 	.word	0x20000028
 8000b74:	200000f0 	.word	0x200000f0

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	2238      	movs	r2, #56	; 0x38
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fc72 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f001 fcd0 	bl	8002540 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bba:	2355      	movs	r3, #85	; 0x55
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fd5a 	bl	8002688 <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bda:	f000 fc9b 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2303      	movs	r3, #3
 8000be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 f85e 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c02:	f000 fc87 	bl	8001514 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	; 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c16:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <MX_FDCAN1_Init+0x88>)
 8000c18:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c40:	2214      	movs	r2, #20
 8000c42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c4c:	220e      	movs	r2, #14
 8000c4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c58:	2214      	movs	r2, #20
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c64:	220e      	movs	r2, #14
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_FDCAN1_Init+0x84>)
 8000c82:	f000 ff45 	bl	8001b10 <HAL_FDCAN_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000c8c:	f000 fc42 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000028 	.word	0x20000028
 8000c98:	40006400 	.word	0x40006400

08000c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_SPI1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cfc:	f002 fbb0 	bl	8003460 <HAL_SPI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 fc05 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000008c 	.word	0x2000008c
 8000d14:	40013000 	.word	0x40013000

08000d18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_TIM6_Init+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d30:	22a9      	movs	r2, #169	; 0xa9
 8000d32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d4a:	f002 ffab 	bl	8003ca4 <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d54:	f000 fbde 	bl	8001514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d66:	f003 fa97 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 fbd0 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000f0 	.word	0x200000f0
 8000d80:	40001000 	.word	0x40001000

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <MX_GPIO_Init+0xa4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <MX_GPIO_Init+0xa4>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <MX_GPIO_Init+0xa4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_GPIO_Init+0xa4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <MX_GPIO_Init+0xa4>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_GPIO_Init+0xa4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2110      	movs	r1, #16
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f001 fb9d 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_GPIO_Init+0xa8>)
 8000dde:	f001 fb97 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000de2:	2310      	movs	r3, #16
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 fa06 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0xa8>)
 8000e1a:	f001 f9f7 	bl	800220c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <Crc8Saej1850>:

/* USER CODE BEGIN 4 */

uint8_t Crc8Saej1850(uint8_t *data,int length)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	uint8_t t_crc;
    t_crc = 0xFF;//Initial value 0xFF
 8000e3a:	23ff      	movs	r3, #255	; 0xff
 8000e3c:	75fb      	strb	r3, [r7, #23]
    for (int f = 0; f < length; f++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e021      	b.n	8000e88 <Crc8Saej1850+0x58>
    {
    	t_crc ^= data[f];
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	4053      	eors	r3, r2
 8000e50:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e011      	b.n	8000e7c <Crc8Saej1850+0x4c>
        {
            if ((t_crc & 0x80) != 0)
 8000e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da07      	bge.n	8000e70 <Crc8Saej1850+0x40>
            {
                t_crc <<= 1;
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	75fb      	strb	r3, [r7, #23]
                t_crc ^= 0x1D;//Polynomial 0x1D
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	f083 031d 	eor.w	r3, r3, #29
 8000e6c:	75fb      	strb	r3, [r7, #23]
 8000e6e:	e002      	b.n	8000e76 <Crc8Saej1850+0x46>
            }
            else
            {
                t_crc <<= 1;
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	ddea      	ble.n	8000e58 <Crc8Saej1850+0x28>
    for (int f = 0; f < length; f++)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	3301      	adds	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbd9      	blt.n	8000e44 <Crc8Saej1850+0x14>
            }
        }
    }
    return ~t_crc;//XOR 0xFF
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <ConfigICM42607T>:

void ConfigICM42607T(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
	uint8_t spiTxBuffer[16];
	uint8_t spiRxBuffer[16];

	icm42607trm.BANK0.PWR_MGMT0.data8[0]=0x00;
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	765a      	strb	r2, [r3, #25]
	icm42607trm.BANK0.GYRO_CONFIG0.data8[0]=0x06;
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	769a      	strb	r2, [r3, #26]
	icm42607trm.BANK0.ACCEL_CONFIG0.data8[0]=0x06;
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000eb8:	2206      	movs	r2, #6
 8000eba:	76da      	strb	r2, [r3, #27]
	icm42607trm.BANK0.TEMP_CONFIG0.data8[0]=0x00;
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	771a      	strb	r2, [r3, #28]
	icm42607trm.BANK0.GYRO_CONFIG1.data8[0]=0x31;
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000ec4:	2231      	movs	r2, #49	; 0x31
 8000ec6:	775a      	strb	r2, [r3, #29]
	icm42607trm.BANK0.ACCEL_CONFIG1.data8[0]=0x41;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000eca:	2241      	movs	r2, #65	; 0x41
 8000ecc:	779a      	strb	r2, [r3, #30]

	icm42607trm.BANK0.PWR_MGMT0.ACCEL_MODE=3;
 8000ece:	4a25      	ldr	r2, [pc, #148]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000ed0:	7e53      	ldrb	r3, [r2, #25]
 8000ed2:	f043 0303 	orr.w	r3, r3, #3
 8000ed6:	7653      	strb	r3, [r2, #25]
	icm42607trm.BANK0.PWR_MGMT0.GYRO_MODE=3;
 8000ed8:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000eda:	7e53      	ldrb	r3, [r2, #25]
 8000edc:	f043 030c 	orr.w	r3, r3, #12
 8000ee0:	7653      	strb	r3, [r2, #25]
	icm42607trm.BANK0.GYRO_CONFIG0.GYRO_UI_FS_SEL=3;
 8000ee2:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000ee4:	7e93      	ldrb	r3, [r2, #26]
 8000ee6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000eea:	7693      	strb	r3, [r2, #26]
	icm42607trm.BANK0.GYRO_CONFIG0.GYRO_ODR=5;
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000eee:	7e93      	ldrb	r3, [r2, #26]
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	f361 0303 	bfi	r3, r1, #0, #4
 8000ef6:	7693      	strb	r3, [r2, #26]
	icm42607trm.BANK0.ACCEL_CONFIG0.ACCEL_UI_FS_SEL=2;
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000efa:	7ed3      	ldrb	r3, [r2, #27]
 8000efc:	2102      	movs	r1, #2
 8000efe:	f361 1346 	bfi	r3, r1, #5, #2
 8000f02:	76d3      	strb	r3, [r2, #27]
	icm42607trm.BANK0.ACCEL_CONFIG0.ACCEL_ODR=5;
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f06:	7ed3      	ldrb	r3, [r2, #27]
 8000f08:	2105      	movs	r1, #5
 8000f0a:	f361 0303 	bfi	r3, r1, #0, #4
 8000f0e:	76d3      	strb	r3, [r2, #27]
	icm42607trm.BANK0.GYRO_CONFIG1.GYRO_UI_FILT_BW=7;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f12:	7f53      	ldrb	r3, [r2, #29]
 8000f14:	f043 0307 	orr.w	r3, r3, #7
 8000f18:	7753      	strb	r3, [r2, #29]
	icm42607trm.BANK0.ACCEL_CONFIG1.ACCEL_UI_FILT_BW=7;
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f1c:	7f93      	ldrb	r3, [r2, #30]
 8000f1e:	f043 0307 	orr.w	r3, r3, #7
 8000f22:	7793      	strb	r3, [r2, #30]

	spiTxBuffer[0] = ICM42607T_ADDR_B0_PWR_MGMT0;
 8000f24:	231f      	movs	r3, #31
 8000f26:	743b      	strb	r3, [r7, #16]
	spiTxBuffer[1] = icm42607trm.BANK0.PWR_MGMT0.data8[0];
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f2a:	7e5b      	ldrb	r3, [r3, #25]
 8000f2c:	747b      	strb	r3, [r7, #17]
	spiTxBuffer[2] = icm42607trm.BANK0.GYRO_CONFIG0.data8[0];
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f30:	7e9b      	ldrb	r3, [r3, #26]
 8000f32:	74bb      	strb	r3, [r7, #18]
	spiTxBuffer[3] = icm42607trm.BANK0.ACCEL_CONFIG0.data8[0];
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f36:	7edb      	ldrb	r3, [r3, #27]
 8000f38:	74fb      	strb	r3, [r7, #19]
	spiTxBuffer[4] = icm42607trm.BANK0.TEMP_CONFIG0.data8[0];
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f3c:	7f1b      	ldrb	r3, [r3, #28]
 8000f3e:	753b      	strb	r3, [r7, #20]
	spiTxBuffer[5] = icm42607trm.BANK0.GYRO_CONFIG1.data8[0];
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f42:	7f5b      	ldrb	r3, [r3, #29]
 8000f44:	757b      	strb	r3, [r7, #21]
	spiTxBuffer[6] = icm42607trm.BANK0.ACCEL_CONFIG1.data8[0];
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <ConfigICM42607T+0xc0>)
 8000f48:	7f9b      	ldrb	r3, [r3, #30]
 8000f4a:	75bb      	strb	r3, [r7, #22]
	SPI2SWNSSTransmitReceive(spiTxBuffer,spiRxBuffer,7);
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2207      	movs	r2, #7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f945 	bl	80011e4 <SPI2SWNSSTransmitReceive>
	//WhoAmICheck();
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001a8 	.word	0x200001a8

08000f68 <ReadImuICM42607T>:

void ReadImuICM42607T(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t spiTxBuffer[16];
	uint8_t spiRxBuffer[16];

	spiTxBuffer[0] = ICM42607T_ADDR_B0_ACCEL_DATA_X1+0x80;
 8000f6e:	238b      	movs	r3, #139	; 0x8b
 8000f70:	743b      	strb	r3, [r7, #16]
	SPI2SWNSSTransmitReceive(spiTxBuffer,spiRxBuffer,13);
 8000f72:	4639      	mov	r1, r7
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	220d      	movs	r2, #13
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f932 	bl	80011e4 <SPI2SWNSSTransmitReceive>
	imuData.AXL=spiRxBuffer[1+ICM42607T_ADDR_B0_ACCEL_DATA_X0-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000f80:	78ba      	ldrb	r2, [r7, #2]
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000f84:	701a      	strb	r2, [r3, #0]
	imuData.AXH=spiRxBuffer[1+ICM42607T_ADDR_B0_ACCEL_DATA_X1-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000f86:	787a      	ldrb	r2, [r7, #1]
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000f8a:	705a      	strb	r2, [r3, #1]
	imuData.AYL=spiRxBuffer[1+ICM42607T_ADDR_B0_ACCEL_DATA_Y0-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000f8c:	793a      	ldrb	r2, [r7, #4]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000f90:	709a      	strb	r2, [r3, #2]
	imuData.AYH=spiRxBuffer[1+ICM42607T_ADDR_B0_ACCEL_DATA_Y1-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000f92:	78fa      	ldrb	r2, [r7, #3]
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000f96:	70da      	strb	r2, [r3, #3]
	imuData.AZL=spiRxBuffer[1+ICM42607T_ADDR_B0_ACCEL_DATA_Z0-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000f9c:	711a      	strb	r2, [r3, #4]
	imuData.AZH=spiRxBuffer[1+ICM42607T_ADDR_B0_ACCEL_DATA_Z1-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000f9e:	797a      	ldrb	r2, [r7, #5]
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fa2:	715a      	strb	r2, [r3, #5]
	imuData.GXL=spiRxBuffer[1+ICM42607T_ADDR_B0_GYRO_DATA_X0-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000fa4:	7a3a      	ldrb	r2, [r7, #8]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fa8:	719a      	strb	r2, [r3, #6]
	imuData.GXH=spiRxBuffer[1+ICM42607T_ADDR_B0_GYRO_DATA_X1-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fae:	71da      	strb	r2, [r3, #7]
	imuData.GYL=spiRxBuffer[1+ICM42607T_ADDR_B0_GYRO_DATA_Y0-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000fb0:	7aba      	ldrb	r2, [r7, #10]
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fb4:	721a      	strb	r2, [r3, #8]
	imuData.GYH=spiRxBuffer[1+ICM42607T_ADDR_B0_GYRO_DATA_Y1-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000fb6:	7a7a      	ldrb	r2, [r7, #9]
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fba:	725a      	strb	r2, [r3, #9]
	imuData.GZL=spiRxBuffer[1+ICM42607T_ADDR_B0_GYRO_DATA_Z0-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000fbc:	7b3a      	ldrb	r2, [r7, #12]
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fc0:	729a      	strb	r2, [r3, #10]
	imuData.GZH=spiRxBuffer[1+ICM42607T_ADDR_B0_GYRO_DATA_Z1-ICM42607T_ADDR_B0_ACCEL_DATA_X1];
 8000fc2:	7afa      	ldrb	r2, [r7, #11]
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <ReadImuICM42607T+0x68>)
 8000fc6:	72da      	strb	r2, [r3, #11]
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000218 	.word	0x20000218

08000fd4 <CanInitial>:

void CanInitial(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	ftt1.Identifier = 0x174;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <CanInitial+0xbc>)
 8000fda:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8000fde:	601a      	str	r2, [r3, #0]
	ftt1.IdType = FDCAN_STANDARD_ID;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <CanInitial+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
	ftt1.TxFrameType = FDCAN_DATA_FRAME;
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <CanInitial+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	ftt1.DataLength = FDCAN_DLC_BYTES_8;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <CanInitial+0xbc>)
 8000fee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff2:	60da      	str	r2, [r3, #12]
	ftt1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <CanInitial+0xbc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
	ftt1.BitRateSwitch = FDCAN_BRS_OFF;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <CanInitial+0xbc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
	ftt1.FDFormat = FDCAN_CLASSIC_CAN;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <CanInitial+0xbc>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
	ftt1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <CanInitial+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
	ftt1.MessageMarker = 0;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <CanInitial+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]

	ftt2.Identifier = 0x178;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <CanInitial+0xc0>)
 8001014:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001018:	601a      	str	r2, [r3, #0]
	ftt2.IdType = FDCAN_STANDARD_ID;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <CanInitial+0xc0>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
	ftt2.TxFrameType = FDCAN_DATA_FRAME;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <CanInitial+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
	ftt2.DataLength = FDCAN_DLC_BYTES_8;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <CanInitial+0xc0>)
 8001028:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800102c:	60da      	str	r2, [r3, #12]
	ftt2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <CanInitial+0xc0>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
	ftt2.BitRateSwitch = FDCAN_BRS_OFF;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <CanInitial+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
	ftt2.FDFormat = FDCAN_CLASSIC_CAN;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <CanInitial+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
	ftt2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <CanInitial+0xc0>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
	ftt2.MessageMarker = 0;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <CanInitial+0xc0>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]

	ftt3.Identifier = 0x17C;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <CanInitial+0xc4>)
 800104e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001052:	601a      	str	r2, [r3, #0]
	ftt3.IdType = FDCAN_STANDARD_ID;
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <CanInitial+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
	ftt3.TxFrameType = FDCAN_DATA_FRAME;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <CanInitial+0xc4>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
	ftt3.DataLength = FDCAN_DLC_BYTES_8;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <CanInitial+0xc4>)
 8001062:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001066:	60da      	str	r2, [r3, #12]
	ftt3.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <CanInitial+0xc4>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
	ftt3.BitRateSwitch = FDCAN_BRS_OFF;
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <CanInitial+0xc4>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
	ftt3.FDFormat = FDCAN_CLASSIC_CAN;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <CanInitial+0xc4>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
	ftt3.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <CanInitial+0xc4>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
	ftt3.MessageMarker = 0;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <CanInitial+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	2000013c 	.word	0x2000013c
 8001094:	20000160 	.word	0x20000160
 8001098:	20000184 	.word	0x20000184

0800109c <CanOutput>:


void CanOutput(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	static uint8_t counter=0;

	canMessage0x174.can0x174.AY=GetRealAccelerometer(imuData.AY);
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <CanOutput+0x118>)
 80010a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f8be 	bl	8001228 <GetRealAccelerometer>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <CanOutput+0x11c>)
 80010b2:	811a      	strh	r2, [r3, #8]
	canMessage0x178.can0x178.AX=GetRealAccelerometer(imuData.AX);
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <CanOutput+0x118>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f8b4 	bl	8001228 <GetRealAccelerometer>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <CanOutput+0x120>)
 80010c6:	811a      	strh	r2, [r3, #8]
	canMessage0x17C.can0x17C.AZ=GetRealAccelerometer(imuData.AZ);
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <CanOutput+0x118>)
 80010ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f8aa 	bl	8001228 <GetRealAccelerometer>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <CanOutput+0x124>)
 80010da:	811a      	strh	r2, [r3, #8]

	canMessage0x174.can0x174.YAW_RATE=GetRealGyroscope(imuData.GZ);
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <CanOutput+0x118>)
 80010de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f920 	bl	8001328 <GetRealGyroscope>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <CanOutput+0x11c>)
 80010ee:	809a      	strh	r2, [r3, #4]
	canMessage0x178.can0x178.ROLL_RATE=GetRealGx(imuData.GX);
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <CanOutput+0x118>)
 80010f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f986 	bl	8001408 <GetRealGx>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <CanOutput+0x120>)
 8001102:	809a      	strh	r2, [r3, #4]
	canMessage0x17C.can0x17C.PITCH_RATE=GetRealGyroscope(imuData.GY);
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <CanOutput+0x118>)
 8001106:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f90c 	bl	8001328 <GetRealGyroscope>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <CanOutput+0x124>)
 8001116:	809a      	strh	r2, [r3, #4]

	canMessage0x174.can0x174.MSG_CNT=counter;
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <CanOutput+0x128>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <CanOutput+0x11c>)
 8001124:	7a93      	ldrb	r3, [r2, #10]
 8001126:	f361 0303 	bfi	r3, r1, #0, #4
 800112a:	7293      	strb	r3, [r2, #10]
	canMessage0x178.can0x178.MSG_CNT=counter;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <CanOutput+0x128>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <CanOutput+0x120>)
 8001138:	7a93      	ldrb	r3, [r2, #10]
 800113a:	f361 0303 	bfi	r3, r1, #0, #4
 800113e:	7293      	strb	r3, [r2, #10]
	canMessage0x17C.can0x17C.MSG_CNT=counter;
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <CanOutput+0x128>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	b2d9      	uxtb	r1, r3
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <CanOutput+0x124>)
 800114c:	7a93      	ldrb	r3, [r2, #10]
 800114e:	f361 0303 	bfi	r3, r1, #0, #4
 8001152:	7293      	strb	r3, [r2, #10]

	counter++;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <CanOutput+0x128>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <CanOutput+0x128>)
 800115e:	701a      	strb	r2, [r3, #0]

	canMessage0x174.can0x174.CRC_=Crc8Saej1850(canMessage0x174.data8, 7);
 8001160:	2107      	movs	r1, #7
 8001162:	4819      	ldr	r0, [pc, #100]	; (80011c8 <CanOutput+0x12c>)
 8001164:	f7ff fe64 	bl	8000e30 <Crc8Saej1850>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <CanOutput+0x11c>)
 800116e:	72da      	strb	r2, [r3, #11]
	canMessage0x178.can0x178.CRC_=Crc8Saej1850(canMessage0x178.data8, 7);
 8001170:	2107      	movs	r1, #7
 8001172:	4816      	ldr	r0, [pc, #88]	; (80011cc <CanOutput+0x130>)
 8001174:	f7ff fe5c 	bl	8000e30 <Crc8Saej1850>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <CanOutput+0x120>)
 800117e:	72da      	strb	r2, [r3, #11]
	canMessage0x17C.can0x17C.CRC_=Crc8Saej1850(canMessage0x17C.data8, 7);
 8001180:	2107      	movs	r1, #7
 8001182:	4813      	ldr	r0, [pc, #76]	; (80011d0 <CanOutput+0x134>)
 8001184:	f7ff fe54 	bl	8000e30 <Crc8Saej1850>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <CanOutput+0x124>)
 800118e:	72da      	strb	r2, [r3, #11]


	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &ftt1, canMessage0x174.data8);
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <CanOutput+0x12c>)
 8001192:	4910      	ldr	r1, [pc, #64]	; (80011d4 <CanOutput+0x138>)
 8001194:	4810      	ldr	r0, [pc, #64]	; (80011d8 <CanOutput+0x13c>)
 8001196:	f000 fe3d 	bl	8001e14 <HAL_FDCAN_AddMessageToTxFifoQ>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &ftt2, canMessage0x178.data8);
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <CanOutput+0x130>)
 800119c:	490f      	ldr	r1, [pc, #60]	; (80011dc <CanOutput+0x140>)
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <CanOutput+0x13c>)
 80011a0:	f000 fe38 	bl	8001e14 <HAL_FDCAN_AddMessageToTxFifoQ>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &ftt3, canMessage0x17C.data8);
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <CanOutput+0x134>)
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <CanOutput+0x144>)
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <CanOutput+0x13c>)
 80011aa:	f000 fe33 	bl	8001e14 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000218 	.word	0x20000218
 80011b8:	20000224 	.word	0x20000224
 80011bc:	20000234 	.word	0x20000234
 80011c0:	20000244 	.word	0x20000244
 80011c4:	20000254 	.word	0x20000254
 80011c8:	20000228 	.word	0x20000228
 80011cc:	20000238 	.word	0x20000238
 80011d0:	20000248 	.word	0x20000248
 80011d4:	2000013c 	.word	0x2000013c
 80011d8:	20000028 	.word	0x20000028
 80011dc:	20000160 	.word	0x20000160
 80011e0:	20000184 	.word	0x20000184

080011e4 <SPI2SWNSSTransmitReceive>:
void SPI2SWNSSTransmitReceive(uint8_t *txData,uint8_t *rxData,uint16_t length)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2110      	movs	r1, #16
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f001 f989 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txData, rxData, length,1000);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001204:	9200      	str	r2, [sp, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <SPI2SWNSSTransmitReceive+0x40>)
 800120c:	f002 f9d3 	bl	80035b6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2110      	movs	r1, #16
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f001 f97a 	bl	8002510 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000008c 	.word	0x2000008c

08001228 <GetRealAccelerometer>:

uint16_t GetRealAccelerometer(int16_t inputData) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	double result=(double)inputData;
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f940 	bl	80004bc <__aeabi_i2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	e9c7 2304 	strd	r2, r3, [r7, #16]
	result=result * 8 / 65535*9.8*800+32768;
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <GetRealAccelerometer+0xf0>)
 800124a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800124e:	f7ff f99f 	bl	8000590 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a329      	add	r3, pc, #164	; (adr r3, 8001300 <GetRealAccelerometer+0xd8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fac0 	bl	80007e4 <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	a326      	add	r3, pc, #152	; (adr r3, 8001308 <GetRealAccelerometer+0xe0>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff f98d 	bl	8000590 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <GetRealAccelerometer+0xf4>)
 8001284:	f7ff f984 	bl	8000590 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <GetRealAccelerometer+0xf8>)
 8001296:	f7fe ffc5 	bl	8000224 <__adddf3>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(result>65534)result=65534;
 80012a2:	a31b      	add	r3, pc, #108	; (adr r3, 8001310 <GetRealAccelerometer+0xe8>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ac:	f7ff fc00 	bl	8000ab0 <__aeabi_dcmpgt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <GetRealAccelerometer+0x9a>
 80012b6:	a316      	add	r3, pc, #88	; (adr r3, 8001310 <GetRealAccelerometer+0xe8>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012c0:	e010      	b.n	80012e4 <GetRealAccelerometer+0xbc>
	else if(result<0)result=0;
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ce:	f7ff fbd1 	bl	8000a74 <__aeabi_dcmplt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <GetRealAccelerometer+0xbc>
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t result16=result;
 80012e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e8:	f7ff fbec 	bl	8000ac4 <__aeabi_d2uiz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	81fb      	strh	r3, [r7, #14]
	return result16;
 80012f0:	89fb      	ldrh	r3, [r7, #14]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	40efffe0 	.word	0x40efffe0
 8001308:	9999999a 	.word	0x9999999a
 800130c:	40239999 	.word	0x40239999
 8001310:	00000000 	.word	0x00000000
 8001314:	40efffc0 	.word	0x40efffc0
 8001318:	40200000 	.word	0x40200000
 800131c:	40890000 	.word	0x40890000
 8001320:	40e00000 	.word	0x40e00000
 8001324:	00000000 	.word	0x00000000

08001328 <GetRealGyroscope>:

uint16_t GetRealGyroscope(int16_t inputData) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	double result=(double)inputData;
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8c0 	bl	80004bc <__aeabi_i2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 2304 	strd	r2, r3, [r7, #16]
	result=result* 500 / 65535*200+32768;
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <GetRealGyroscope+0xd0>)
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff f91f 	bl	8000590 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	a323      	add	r3, pc, #140	; (adr r3, 80013e8 <GetRealGyroscope+0xc0>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fa40 	bl	80007e4 <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <GetRealGyroscope+0xd4>)
 8001372:	f7ff f90d 	bl	8000590 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <GetRealGyroscope+0xd8>)
 8001384:	f7fe ff4e 	bl	8000224 <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(result>65534)result=65534;
 8001390:	a317      	add	r3, pc, #92	; (adr r3, 80013f0 <GetRealGyroscope+0xc8>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800139a:	f7ff fb89 	bl	8000ab0 <__aeabi_dcmpgt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <GetRealGyroscope+0x88>
 80013a4:	a312      	add	r3, pc, #72	; (adr r3, 80013f0 <GetRealGyroscope+0xc8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80013ae:	e010      	b.n	80013d2 <GetRealGyroscope+0xaa>
	else if(result<0)result=0;
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013bc:	f7ff fb5a 	bl	8000a74 <__aeabi_dcmplt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <GetRealGyroscope+0xaa>
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t result16=result;
 80013d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013d6:	f7ff fb75 	bl	8000ac4 <__aeabi_d2uiz>
 80013da:	4603      	mov	r3, r0
 80013dc:	81fb      	strh	r3, [r7, #14]
	return result16;
 80013de:	89fb      	ldrh	r3, [r7, #14]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40efffe0 	.word	0x40efffe0
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40efffc0 	.word	0x40efffc0
 80013f8:	407f4000 	.word	0x407f4000
 80013fc:	40690000 	.word	0x40690000
 8001400:	40e00000 	.word	0x40e00000
 8001404:	00000000 	.word	0x00000000

08001408 <GetRealGx>:

uint16_t GetRealGx(int16_t inputData) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
	double result=(double)inputData;
 8001412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f850 	bl	80004bc <__aeabi_i2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	e9c7 2304 	strd	r2, r3, [r7, #16]
	result=(-result)* 500 / 65535*200+32768;
 8001424:	693c      	ldr	r4, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <GetRealGx+0xd8>)
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff f8ab 	bl	8000590 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a323      	add	r3, pc, #140	; (adr r3, 80014d0 <GetRealGx+0xc8>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f9cc 	bl	80007e4 <__aeabi_ddiv>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <GetRealGx+0xdc>)
 800145a:	f7ff f899 	bl	8000590 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <GetRealGx+0xe0>)
 800146c:	f7fe feda 	bl	8000224 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(result>65534)result=65534;
 8001478:	a317      	add	r3, pc, #92	; (adr r3, 80014d8 <GetRealGx+0xd0>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001482:	f7ff fb15 	bl	8000ab0 <__aeabi_dcmpgt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <GetRealGx+0x90>
 800148c:	a312      	add	r3, pc, #72	; (adr r3, 80014d8 <GetRealGx+0xd0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001496:	e010      	b.n	80014ba <GetRealGx+0xb2>
	else if(result<0)result=0;
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a4:	f7ff fae6 	bl	8000a74 <__aeabi_dcmplt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <GetRealGx+0xb2>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t result16=result;
 80014ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014be:	f7ff fb01 	bl	8000ac4 <__aeabi_d2uiz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	81fb      	strh	r3, [r7, #14]
	return result16;
 80014c6:	89fb      	ldrh	r3, [r7, #14]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdb0      	pop	{r4, r5, r7, pc}
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40efffe0 	.word	0x40efffe0
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40efffc0 	.word	0x40efffc0
 80014e0:	407f4000 	.word	0x407f4000
 80014e4:	40690000 	.word	0x40690000
 80014e8:	40e00000 	.word	0x40e00000

080014ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim6.Instance)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d103      	bne.n	8001508 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	ReadImuICM42607T();
 8001500:	f7ff fd32 	bl	8000f68 <ReadImuICM42607T>
    	CanOutput();
 8001504:	f7ff fdca 	bl	800109c <CanOutput>
    }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000f0 	.word	0x200000f0

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_MspInit+0x44>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6613      	str	r3, [r2, #96]	; 0x60
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_MspInit+0x44>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b09a      	sub	sp, #104	; 0x68
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	2244      	movs	r2, #68	; 0x44
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f002 ff71 	bl	8004470 <memset>
  if(hfdcan->Instance==FDCAN1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_FDCAN_MspInit+0xac>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d139      	bne.n	800160c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800159e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fd69 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80015b4:	f7ff ffae 	bl	8001514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_FDCAN_MspInit+0xb0>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	4a16      	ldr	r2, [pc, #88]	; (8001618 <HAL_FDCAN_MspInit+0xb0>)
 80015be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c2:	6593      	str	r3, [r2, #88]	; 0x58
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_FDCAN_MspInit+0xb0>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_FDCAN_MspInit+0xb0>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_FDCAN_MspInit+0xb0>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_FDCAN_MspInit+0xb0>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015fa:	2309      	movs	r3, #9
 80015fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f000 fe00 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3768      	adds	r7, #104	; 0x68
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40006400 	.word	0x40006400
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_SPI_MspInit+0x7c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d128      	bne.n	8001690 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001648:	6613      	str	r3, [r2, #96]	; 0x60
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_SPI_MspInit+0x80>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_SPI_MspInit+0x80>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_SPI_MspInit+0x80>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800166e:	23e0      	movs	r3, #224	; 0xe0
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167e:	2305      	movs	r3, #5
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f000 fdbe 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013000 	.word	0x40013000
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_TIM_Base_MspInit+0x44>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d113      	bne.n	80016da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_TIM_Base_MspInit+0x48>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_TIM_Base_MspInit+0x48>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_TIM_Base_MspInit+0x48>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2036      	movs	r0, #54	; 0x36
 80016d0:	f000 f9e9 	bl	8001aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d4:	2036      	movs	r0, #54	; 0x36
 80016d6:	f000 fa00 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40001000 	.word	0x40001000
 80016e8:	40021000 	.word	0x40021000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f89a 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM6_DAC_IRQHandler+0x10>)
 8001746:	f002 fb6f 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000f0 	.word	0x200000f0

08001754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800177a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <LoopForever+0xe>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001794:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <LoopForever+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017a2:	f7ff ffd7 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f002 fe3f 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017aa:	f7ff f9ab 	bl	8000b04 <main>

080017ae <LoopForever>:

LoopForever:
    b LoopForever
 80017ae:	e7fe      	b.n	80017ae <LoopForever>
  ldr   r0, =_estack
 80017b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017bc:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 80017c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017c4:	2000025c 	.word	0x2000025c

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>

080017ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f95b 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 f80e 	bl	80017fc <HAL_InitTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ec:	f7ff fe98 	bl	8001520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f0:	79fb      	ldrb	r3, [r7, #7]

}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_InitTick+0x68>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d022      	beq.n	8001856 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_InitTick+0x6c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_InitTick+0x68>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800181c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f966 	bl	8001af6 <HAL_SYSTICK_Config>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10f      	bne.n	8001850 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	d809      	bhi.n	800184a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001836:	2200      	movs	r2, #0
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	f04f 30ff 	mov.w	r0, #4294967295
 800183e:	f000 f932 	bl	8001aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_InitTick+0x70>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e007      	b.n	800185a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e004      	b.n	800185a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e001      	b.n	800185a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000008 	.word	0x20000008
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4413      	add	r3, r2
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_IncTick+0x1c>)
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20000258 	.word	0x20000258
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000258 	.word	0x20000258

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d004      	beq.n	80018d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_Delay+0x40>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d0:	bf00      	nop
 80018d2:	f7ff ffdf 	bl	8001894 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d8f7      	bhi.n	80018d2 <HAL_Delay+0x26>
  {
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000008 	.word	0x20000008

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <__NVIC_EnableIRQ+0x38>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff29 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff40 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff90 	bl	80019e4 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5f 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff33 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa4 	bl	8001a4c <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e147      	b.n	8001db2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fd16 	bl	8001568 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0210 	bic.w	r2, r2, #16
 8001b4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b4c:	f7ff fea2 	bl	8001894 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b52:	e012      	b.n	8001b7a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b54:	f7ff fe9e 	bl	8001894 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b0a      	cmp	r3, #10
 8001b60:	d90b      	bls.n	8001b7a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e11b      	b.n	8001db2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d0e5      	beq.n	8001b54 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b98:	f7ff fe7c 	bl	8001894 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b9e:	e012      	b.n	8001bc6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ba0:	f7ff fe78 	bl	8001894 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b0a      	cmp	r3, #10
 8001bac:	d90b      	bls.n	8001bc6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0f5      	b.n	8001db2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0e5      	beq.n	8001ba0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0202 	orr.w	r2, r2, #2
 8001be2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a74      	ldr	r2, [pc, #464]	; (8001dbc <HAL_FDCAN_Init+0x2ac>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d103      	bne.n	8001bf6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001bee:	4a74      	ldr	r2, [pc, #464]	; (8001dc0 <HAL_FDCAN_Init+0x2b0>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7c1b      	ldrb	r3, [r3, #16]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	e007      	b.n	8001c20 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7c5b      	ldrb	r3, [r3, #17]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c36:	619a      	str	r2, [r3, #24]
 8001c38:	e007      	b.n	8001c4a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c48:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7c9b      	ldrb	r3, [r3, #18]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e007      	b.n	8001c74 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c72:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001c98:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0210 	bic.w	r2, r2, #16
 8001ca8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0204 	orr.w	r2, r2, #4
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	e02c      	b.n	8001d1e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d028      	beq.n	8001d1e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d01c      	beq.n	8001d0e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0210 	orr.w	r2, r2, #16
 8001cf2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d110      	bne.n	8001d1e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	619a      	str	r2, [r3, #24]
 8001d0c:	e007      	b.n	8001d1e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0220 	orr.w	r2, r2, #32
 8001d1c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d2e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d36:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d46:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d48:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d52:	d115      	bne.n	8001d80 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d62:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001d6c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	3b01      	subs	r3, #1
 8001d76:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001d7c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001d7e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f966 	bl	8002068 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40006400 	.word	0x40006400
 8001dc0:	40006500 	.word	0x40006500

08001dc4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d110      	bne.n	8001dfa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e006      	b.n	8001e08 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
  }
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d12c      	bne.n	8001e86 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e023      	b.n	8001e94 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f956 	bl	8002114 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e006      	b.n	8001e94 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f043 0208 	orr.w	r2, r3, #8
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
  }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001eae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d003      	beq.n	8001ebe <HAL_FDCAN_ActivateNotification+0x22>
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	f040 80c8 	bne.w	800204e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03b      	beq.n	8001f52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d031      	beq.n	8001f52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d027      	beq.n	8001f52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d01d      	beq.n	8001f52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d013      	beq.n	8001f52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00c      	beq.n	8001f62 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d107      	bne.n	8001f62 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d13b      	bne.n	8001fee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d131      	bne.n	8001fee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d127      	bne.n	8001fee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11d      	bne.n	8001fee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d113      	bne.n	8001fee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0202 	orr.w	r2, r2, #2
 8001ffc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	430a      	orrs	r2, r1
 8002018:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	430a      	orrs	r2, r1
 8002036:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	430a      	orrs	r2, r1
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e006      	b.n	800205c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002072:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002082:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	061a      	lsls	r2, r3, #24
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e005      	b.n	80020f6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3304      	adds	r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3f3      	bcc.n	80020ea <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	4000a400 	.word	0x4000a400

08002114 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002132:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800213a:	4313      	orrs	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e00a      	b.n	8002156 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002148:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800214e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002154:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002160:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002166:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800216c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3304      	adds	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3304      	adds	r3, #4
 800219e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e020      	b.n	80021e8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3303      	adds	r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3302      	adds	r3, #2
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	440b      	add	r3, r1
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80021be:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	440b      	add	r3, r1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80021cc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	440a      	add	r2, r1
 80021d4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80021d6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	3304      	adds	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	4a06      	ldr	r2, [pc, #24]	; (8002208 <FDCAN_CopyMessageToRAM+0xf4>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	461a      	mov	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d3d5      	bcc.n	80021a6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3724      	adds	r7, #36	; 0x24
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	080044a8 	.word	0x080044a8

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221a:	e15a      	b.n	80024d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 814c 	beq.w	80024cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002248:	2b02      	cmp	r3, #2
 800224a:	d130      	bne.n	80022ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002282:	2201      	movs	r2, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 0201 	and.w	r2, r3, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d017      	beq.n	80022ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d123      	bne.n	800233e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	6939      	ldr	r1, [r7, #16]
 800233a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a6 	beq.w	80024cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002380:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_GPIO_Init+0x2e4>)
 8002382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002384:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_GPIO_Init+0x2e4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6613      	str	r3, [r2, #96]	; 0x60
 800238c:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_GPIO_Init+0x2e4>)
 800238e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002398:	4a56      	ldr	r2, [pc, #344]	; (80024f4 <HAL_GPIO_Init+0x2e8>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023c2:	d01f      	beq.n	8002404 <HAL_GPIO_Init+0x1f8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x2ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d019      	beq.n	8002400 <HAL_GPIO_Init+0x1f4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <HAL_GPIO_Init+0x2f0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1f0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_GPIO_Init+0x2f4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1ec>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x2f8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1e8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_GPIO_Init+0x2fc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1e4>
 80023ec:	2305      	movs	r3, #5
 80023ee:	e00a      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023f0:	2306      	movs	r3, #6
 80023f2:	e008      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e006      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023f8:	2303      	movs	r3, #3
 80023fa:	e004      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_GPIO_Init+0x1fa>
 8002404:	2300      	movs	r3, #0
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002416:	4937      	ldr	r1, [pc, #220]	; (80024f4 <HAL_GPIO_Init+0x2e8>)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_GPIO_Init+0x300>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002448:	4a30      	ldr	r2, [pc, #192]	; (800250c <HAL_GPIO_Init+0x300>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_GPIO_Init+0x300>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002472:	4a26      	ldr	r2, [pc, #152]	; (800250c <HAL_GPIO_Init+0x300>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_GPIO_Init+0x300>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_GPIO_Init+0x300>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_GPIO_Init+0x300>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c6:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_GPIO_Init+0x300>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ae9d 	bne.w	800221c <HAL_GPIO_Init+0x10>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	48000400 	.word	0x48000400
 80024fc:	48000800 	.word	0x48000800
 8002500:	48000c00 	.word	0x48000c00
 8002504:	48001000 	.word	0x48001000
 8002508:	48001400 	.word	0x48001400
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800252c:	e002      	b.n	8002534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d141      	bne.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800254e:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	d131      	bne.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002562:	4a46      	ldr	r2, [pc, #280]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002574:	4a41      	ldr	r2, [pc, #260]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2232      	movs	r2, #50	; 0x32
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	4a3f      	ldr	r2, [pc, #252]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9b      	lsrs	r3, r3, #18
 800258e:	3301      	adds	r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002592:	e002      	b.n	800259a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3b01      	subs	r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d102      	bne.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f2      	bne.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ae:	4b33      	ldr	r3, [pc, #204]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d158      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e057      	b.n	8002670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c6:	4a2d      	ldr	r2, [pc, #180]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025d0:	e04d      	b.n	800266e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d141      	bne.n	800265e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d131      	bne.n	800264c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025f8:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002600:	4a1e      	ldr	r2, [pc, #120]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2232      	movs	r2, #50	; 0x32
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9b      	lsrs	r3, r3, #18
 800261a:	3301      	adds	r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800261e:	e002      	b.n	8002626 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3b01      	subs	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d102      	bne.n	800263a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f2      	bne.n	8002620 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d112      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e011      	b.n	8002670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800265c:	e007      	b.n	800266e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40007000 	.word	0x40007000
 8002680:	20000000 	.word	0x20000000
 8002684:	431bde83 	.word	0x431bde83

08002688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e306      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d075      	beq.n	8002792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4b97      	ldr	r3, [pc, #604]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b0:	4b94      	ldr	r3, [pc, #592]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3e>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_OscConfig+0x44>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x108>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d157      	bne.n	8002790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e2e1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x74>
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a84      	ldr	r2, [pc, #528]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7e      	ldr	r2, [pc, #504]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a7b      	ldr	r2, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 8002720:	4b78      	ldr	r3, [pc, #480]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b75      	ldr	r3, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a74      	ldr	r2, [pc, #464]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff f8a8 	bl	8001894 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff f8a4 	bl	8001894 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e2a6      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275a:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xc0>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f894 	bl	8001894 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff f890 	bl	8001894 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e292      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0xe8>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d075      	beq.n	800288a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279e:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a8:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0x136>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_OscConfig+0x13c>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11f      	bne.n	8002804 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c4:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x154>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e265      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	4946      	ldr	r1, [pc, #280]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027f0:	4b45      	ldr	r3, [pc, #276]	; (8002908 <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f801 	bl	80017fc <HAL_InitTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d043      	beq.n	8002888 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e251      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff f83c 	bl	8001894 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff f838 	bl	8001894 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e23a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	492d      	ldr	r1, [pc, #180]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e01a      	b.n	800288a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800285a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff f818 	bl	8001894 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002868:	f7ff f814 	bl	8001894 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e216      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1e0>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d041      	beq.n	800291a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a4:	4a17      	ldr	r2, [pc, #92]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7fe fff1 	bl	8001894 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe ffed 	bl	8001894 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1ef      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0ef      	beq.n	80028b6 <HAL_RCC_OscConfig+0x22e>
 80028d6:	e020      	b.n	800291a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_OscConfig+0x27c>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe ffd4 	bl	8001894 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ee:	e00d      	b.n	800290c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe ffd0 	bl	8001894 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d906      	bls.n	800290c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1d2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	4b8c      	ldr	r3, [pc, #560]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ea      	bne.n	80028f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80a6 	beq.w	8002a74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800292c:	4b84      	ldr	r3, [pc, #528]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x2b4>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x2b6>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00d      	beq.n	800295e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4a7e      	ldr	r2, [pc, #504]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
 800294e:	4b7c      	ldr	r3, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295e:	4b79      	ldr	r3, [pc, #484]	; (8002b44 <HAL_RCC_OscConfig+0x4bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800296a:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCC_OscConfig+0x4bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a75      	ldr	r2, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x4bc>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7fe ff8d 	bl	8001894 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fe ff89 	bl	8001894 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e18b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCC_OscConfig+0x4bc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d108      	bne.n	80029b6 <HAL_RCC_OscConfig+0x32e>
 80029a4:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a65      	ldr	r2, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b4:	e024      	b.n	8002a00 <HAL_RCC_OscConfig+0x378>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d110      	bne.n	80029e0 <HAL_RCC_OscConfig+0x358>
 80029be:	4b60      	ldr	r3, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	4a5e      	ldr	r2, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ce:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029de:	e00f      	b.n	8002a00 <HAL_RCC_OscConfig+0x378>
 80029e0:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d016      	beq.n	8002a36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe ff44 	bl	8001894 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe ff40 	bl	8001894 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e140      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ed      	beq.n	8002a10 <HAL_RCC_OscConfig+0x388>
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe ff2d 	bl	8001894 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe ff29 	bl	8001894 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e129      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a54:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ed      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03c      	beq.n	8002afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fefc 	bl	8001894 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa0:	f7fe fef8 	bl	8001894 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0fa      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x418>
 8002ac0:	e01b      	b.n	8002afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fedf 	bl	8001894 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ada:	f7fe fedb 	bl	8001894 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0dd      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80d1 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	f000 808b 	beq.w	8002c28 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d15e      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <HAL_RCC_OscConfig+0x4b8>)
 8002b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe feb5 	bl	8001894 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	e00c      	b.n	8002b48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe feb1 	bl	8001894 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d905      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0b3      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ec      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_RCC_OscConfig+0x62c>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6a11      	ldr	r1, [r2, #32]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b6e:	0212      	lsls	r2, r2, #8
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b76:	0852      	lsrs	r2, r2, #1
 8002b78:	3a01      	subs	r2, #1
 8002b7a:	0552      	lsls	r2, r2, #21
 8002b7c:	4311      	orrs	r1, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b82:	0852      	lsrs	r2, r2, #1
 8002b84:	3a01      	subs	r2, #1
 8002b86:	0652      	lsls	r2, r2, #25
 8002b88:	4311      	orrs	r1, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b8e:	06d2      	lsls	r2, r2, #27
 8002b90:	430a      	orrs	r2, r1
 8002b92:	4947      	ldr	r1, [pc, #284]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a44      	ldr	r2, [pc, #272]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba4:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a41      	ldr	r2, [pc, #260]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fe70 	bl	8001894 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fe6c 	bl	8001894 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e06e      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x530>
 8002bd6:	e066      	b.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002be4:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a31      	ldr	r2, [pc, #196]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002bf6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fe48 	bl	8001894 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fe44 	bl	8001894 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e046      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1a:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x580>
 8002c26:	e03e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e039      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_OscConfig+0x628>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d12c      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	3b01      	subs	r3, #1
 8002c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d123      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d11b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d113      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	019f800c 	.word	0x019f800c

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e11e      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d910      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b8e      	ldr	r3, [pc, #568]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 020f 	bic.w	r2, r3, #15
 8002ce6:	498c      	ldr	r1, [pc, #560]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b8a      	ldr	r3, [pc, #552]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e106      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d073      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d129      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0f4      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d24:	f000 f966 	bl	8002ff4 <RCC_GetSysClockFreqFromPLLSource>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4a7c      	ldr	r2, [pc, #496]	; (8002f20 <HAL_RCC_ClockConfig+0x268>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d93f      	bls.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d033      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d12f      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0c6      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0be      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d90:	f000 f8ce 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4a61      	ldr	r2, [pc, #388]	; (8002f20 <HAL_RCC_ClockConfig+0x268>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d909      	bls.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da6:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4957      	ldr	r1, [pc, #348]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fd66 	bl	8001894 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fd62 	bl	8001894 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e095      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4936      	ldr	r1, [pc, #216]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e4e:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d21d      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 020f 	bic.w	r2, r3, #15
 8002e70:	4929      	ldr	r1, [pc, #164]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fd0c 	bl	8001894 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fd08 	bl	8001894 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e03b      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ed      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4917      	ldr	r1, [pc, #92]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	490f      	ldr	r1, [pc, #60]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee2:	f000 f825 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	490c      	ldr	r1, [pc, #48]	; (8002f24 <HAL_RCC_ClockConfig+0x26c>)
 8002ef4:	5ccb      	ldrb	r3, [r1, r3]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x270>)
 8002f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fc78 	bl	80017fc <HAL_InitTick>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	04c4b400 	.word	0x04c4b400
 8002f24:	08004498 	.word	0x08004498
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d102      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e047      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f54:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e03e      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d136      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8e:	68d2      	ldr	r2, [r2, #12]
 8002f90:	0a12      	lsrs	r2, r2, #8
 8002f92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	617b      	str	r3, [r7, #20]
      break;
 8002f9c:	e00c      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	0a12      	lsrs	r2, r2, #8
 8002fac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
      break;
 8002fb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0e5b      	lsrs	r3, r3, #25
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	e001      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fd8:	693b      	ldr	r3, [r7, #16]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	007a1200 	.word	0x007a1200

08002ff4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d10c      	bne.n	8003032 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003018:	4a17      	ldr	r2, [pc, #92]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	0a12      	lsrs	r2, r2, #8
 8003026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
    break;
 8003030:	e00c      	b.n	800304c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	0a12      	lsrs	r2, r2, #8
 8003040:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    break;
 800304a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0e5b      	lsrs	r3, r3, #25
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003066:	687b      	ldr	r3, [r7, #4]
}
 8003068:	4618      	mov	r0, r3
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	007a1200 	.word	0x007a1200
 800307c:	00f42400 	.word	0x00f42400

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003088:	2300      	movs	r3, #0
 800308a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800308c:	2300      	movs	r3, #0
 800308e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8098 	beq.w	80031ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10d      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	; 0x58
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d6:	f7fe fbdd 	bl	8001894 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030dc:	e009      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fbd9 	bl	8001894 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74fb      	strb	r3, [r7, #19]
        break;
 80030f0:	e005      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ef      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d159      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01e      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	d019      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fb99 	bl	8001894 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003164:	e00b      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe fb95 	bl	8001894 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d902      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	74fb      	strb	r3, [r7, #19]
            break;
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ec      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	4903      	ldr	r1, [pc, #12]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031a8:	e008      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
 80031ae:	e005      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031bc:	7c7b      	ldrb	r3, [r7, #17]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4ba6      	ldr	r3, [pc, #664]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4aa5      	ldr	r2, [pc, #660]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031da:	4ba0      	ldr	r3, [pc, #640]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	499c      	ldr	r1, [pc, #624]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fc:	4b97      	ldr	r3, [pc, #604]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 020c 	bic.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4994      	ldr	r1, [pc, #592]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321e:	4b8f      	ldr	r3, [pc, #572]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	498b      	ldr	r1, [pc, #556]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	4983      	ldr	r1, [pc, #524]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003262:	4b7e      	ldr	r3, [pc, #504]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	497a      	ldr	r1, [pc, #488]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003284:	4b75      	ldr	r3, [pc, #468]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4972      	ldr	r1, [pc, #456]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032a6:	4b6d      	ldr	r3, [pc, #436]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4969      	ldr	r1, [pc, #420]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c8:	4b64      	ldr	r3, [pc, #400]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4961      	ldr	r1, [pc, #388]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ea:	4b5c      	ldr	r3, [pc, #368]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	4958      	ldr	r1, [pc, #352]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	4950      	ldr	r1, [pc, #320]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332c:	4b4b      	ldr	r3, [pc, #300]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003336:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003344:	4b45      	ldr	r3, [pc, #276]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	4942      	ldr	r1, [pc, #264]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003362:	d105      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003364:	4b3d      	ldr	r3, [pc, #244]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a3c      	ldr	r2, [pc, #240]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800337c:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4934      	ldr	r1, [pc, #208]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b2f      	ldr	r3, [pc, #188]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a2e      	ldr	r2, [pc, #184]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b4:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	4926      	ldr	r1, [pc, #152]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d2:	d105      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d015      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	4918      	ldr	r1, [pc, #96]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340a:	d105      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a12      	ldr	r2, [pc, #72]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	490a      	ldr	r1, [pc, #40]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003442:	d105      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003450:	7cbb      	ldrb	r3, [r7, #18]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000

08003460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e09d      	b.n	80035ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003482:	d009      	beq.n	8003498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
 800348a:	e005      	b.n	8003498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe f8b2 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d8:	d902      	bls.n	80034e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e002      	b.n	80034e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034ee:	d007      	beq.n	8003500 <HAL_SPI_Init+0xa0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	ea42 0103 	orr.w	r1, r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	f003 0204 	and.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800357c:	ea42 0103 	orr.w	r1, r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b08a      	sub	sp, #40	; 0x28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035c4:	2301      	movs	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x26>
 80035d8:	2302      	movs	r3, #2
 80035da:	e1fb      	b.n	80039d4 <HAL_SPI_TransmitReceive+0x41e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e4:	f7fe f956 	bl	8001894 <HAL_GetTick>
 80035e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003600:	7efb      	ldrb	r3, [r7, #27]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d00e      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x6e>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360c:	d106      	bne.n	800361c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_SPI_TransmitReceive+0x66>
 8003616:	7efb      	ldrb	r3, [r7, #27]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d003      	beq.n	8003624 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003622:	e1cd      	b.n	80039c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x80>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x80>
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800363c:	e1c0      	b.n	80039c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b04      	cmp	r3, #4
 8003648:	d003      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2205      	movs	r2, #5
 800364e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	887a      	ldrh	r2, [r7, #2]
 800366a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	887a      	ldrh	r2, [r7, #2]
 800367e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003694:	d802      	bhi.n	800369c <HAL_SPI_TransmitReceive+0xe6>
 8003696:	8a3b      	ldrh	r3, [r7, #16]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d908      	bls.n	80036ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	e007      	b.n	80036be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d007      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036e4:	d97c      	bls.n	80037e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x13e>
 80036ee:	8a7b      	ldrh	r3, [r7, #18]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d169      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	1c9a      	adds	r2, r3, #2
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003718:	e056      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d11b      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x1aa>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x1aa>
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	2b01      	cmp	r3, #1
 8003736:	d113      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	1c9a      	adds	r2, r3, #2
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d11c      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x1f2>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	b292      	uxth	r2, r2
 8003786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037a8:	f7fe f874 	bl	8001894 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d807      	bhi.n	80037c8 <HAL_SPI_TransmitReceive+0x212>
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d003      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037c6:	e0fb      	b.n	80039c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1a3      	bne.n	800371a <HAL_SPI_TransmitReceive+0x164>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d19d      	bne.n	800371a <HAL_SPI_TransmitReceive+0x164>
 80037de:	e0df      	b.n	80039a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x23a>
 80037e8:	8a7b      	ldrh	r3, [r7, #18]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	f040 80cb 	bne.w	8003986 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d912      	bls.n	8003820 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b02      	subs	r3, #2
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800381e:	e0b2      	b.n	8003986 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003846:	e09e      	b.n	8003986 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b02      	cmp	r3, #2
 8003854:	d134      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x30a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02f      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x30a>
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	2b01      	cmp	r3, #1
 8003864:	d12c      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d912      	bls.n	8003896 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b02      	subs	r3, #2
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003894:	e012      	b.n	80038bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d148      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x3aa>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d042      	beq.n	8003960 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d923      	bls.n	800392e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	b292      	uxth	r2, r2
 80038f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b02      	subs	r3, #2
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d81f      	bhi.n	800395c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	e016      	b.n	800395c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f103 020c 	add.w	r2, r3, #12
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800395c:	2301      	movs	r3, #1
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003960:	f7fd ff98 	bl	8001894 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396c:	429a      	cmp	r2, r3
 800396e:	d803      	bhi.n	8003978 <HAL_SPI_TransmitReceive+0x3c2>
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d102      	bne.n	800397e <HAL_SPI_TransmitReceive+0x3c8>
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003984:	e01c      	b.n	80039c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	f47f af5b 	bne.w	8003848 <HAL_SPI_TransmitReceive+0x292>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	f47f af54 	bne.w	8003848 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f937 	bl	8003c18 <SPI_EndRxTxTransaction>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60
 80039bc:	e000      	b.n	80039c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039ec:	f7fd ff52 	bl	8001894 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039fc:	f7fd ff4a 	bl	8001894 <HAL_GetTick>
 8003a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	015b      	lsls	r3, r3, #5
 8003a08:	0d1b      	lsrs	r3, r3, #20
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a12:	e054      	b.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d050      	beq.n	8003abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a1c:	f7fd ff3a 	bl	8001894 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d902      	bls.n	8003a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d13d      	bne.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d111      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	d004      	beq.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d107      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d10f      	bne.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e017      	b.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d19b      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003afe:	f7fd fec9 	bl	8001894 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b0e:	f7fd fec1 	bl	8001894 <HAL_GetTick>
 8003b12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00da      	lsls	r2, r3, #3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	0d1b      	lsrs	r3, r3, #20
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b34:	e060      	b.n	8003bf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b3c:	d107      	bne.n	8003b4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d050      	beq.n	8003bf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b56:	f7fd fe9d 	bl	8001894 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d902      	bls.n	8003b6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d13d      	bne.n	8003be8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b84:	d111      	bne.n	8003baa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d004      	beq.n	8003b9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d107      	bne.n	8003baa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb2:	d10f      	bne.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e010      	b.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d196      	bne.n	8003b36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3728      	adds	r7, #40	; 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff ff5b 	bl	8003aec <SPI_WaitFifoStateUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e027      	b.n	8003c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2200      	movs	r2, #0
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fec0 	bl	80039dc <SPI_WaitFlagStateUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e014      	b.n	8003c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff34 	bl	8003aec <SPI_WaitFifoStateUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e000      	b.n	8003c9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e049      	b.n	8003d4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fce8 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 fa48 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04a      	b.n	8003e02 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d013      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d115      	bne.n	8003dec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d015      	beq.n	8003dfe <HAL_TIM_Base_Start_IT+0xaa>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d011      	beq.n	8003dfe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	e008      	b.n	8003dfe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e000      	b.n	8003e00 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40013400 	.word	0x40013400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	00010007 	.word	0x00010007

08003e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0202 	mvn.w	r2, #2
 8003e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f965 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f957 	bl	8004126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f968 	bl	800414e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0204 	mvn.w	r2, #4
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f93b 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f92d 	bl	8004126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f93e 	bl	800414e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0208 	mvn.w	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f911 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f903 	bl	8004126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f914 	bl	800414e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2208      	movs	r2, #8
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8e7 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8d9 	bl	8004126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8ea 	bl	800414e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0201 	mvn.w	r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd faa0 	bl	80014ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9ec 	bl	80043b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe6:	d10e      	bne.n	8004006 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d107      	bne.n	8004006 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f9df 	bl	80043c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d10e      	bne.n	8004032 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d107      	bne.n	8004032 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f898 	bl	8004162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0220 	mvn.w	r2, #32
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f99f 	bl	800439c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406c:	d10f      	bne.n	800408e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800407c:	d107      	bne.n	800408e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f9a5 	bl	80043d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800409c:	d10f      	bne.n	80040be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f997 	bl	80043ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040cc:	d10f      	bne.n	80040ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f989 	bl	8004400 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040fc:	d10f      	bne.n	800411e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800410c:	d107      	bne.n	800411e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f97b 	bl	8004414 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3c      	ldr	r2, [pc, #240]	; (800427c <TIM_Base_SetConfig+0x104>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a39      	ldr	r2, [pc, #228]	; (8004280 <TIM_Base_SetConfig+0x108>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a38      	ldr	r2, [pc, #224]	; (8004284 <TIM_Base_SetConfig+0x10c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x38>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a37      	ldr	r2, [pc, #220]	; (8004288 <TIM_Base_SetConfig+0x110>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2d      	ldr	r2, [pc, #180]	; (800427c <TIM_Base_SetConfig+0x104>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01b      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d017      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <TIM_Base_SetConfig+0x108>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a29      	ldr	r2, [pc, #164]	; (8004284 <TIM_Base_SetConfig+0x10c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00f      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a28      	ldr	r2, [pc, #160]	; (8004288 <TIM_Base_SetConfig+0x110>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <TIM_Base_SetConfig+0x114>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a26      	ldr	r2, [pc, #152]	; (8004290 <TIM_Base_SetConfig+0x118>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <TIM_Base_SetConfig+0x11c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a10      	ldr	r2, [pc, #64]	; (800427c <TIM_Base_SetConfig+0x104>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00f      	beq.n	8004260 <TIM_Base_SetConfig+0xe8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <TIM_Base_SetConfig+0x110>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0xe8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <TIM_Base_SetConfig+0x114>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0xe8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <TIM_Base_SetConfig+0x118>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xe8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <TIM_Base_SetConfig+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40013400 	.word	0x40013400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e065      	b.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2c      	ldr	r2, [pc, #176]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2b      	ldr	r2, [pc, #172]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d013      	beq.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a12      	ldr	r2, [pc, #72]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10c      	bne.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40013400 	.word	0x40013400
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40014000 	.word	0x40014000

0800439c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 f820 	bl	8004480 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	080044b8 	.word	0x080044b8
 8004464:	080044b8 	.word	0x080044b8
 8004468:	080044b8 	.word	0x080044b8
 800446c:	080044bc 	.word	0x080044bc

08004470 <memset>:
 8004470:	4402      	add	r2, r0
 8004472:	4603      	mov	r3, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	f803 1b01 	strb.w	r1, [r3], #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
